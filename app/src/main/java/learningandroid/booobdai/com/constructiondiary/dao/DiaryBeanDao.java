package learningandroid.booobdai.com.constructiondiary.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import learningandroid.booobdai.com.constructiondiary.entity.DiaryBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DIARY_BEAN".
*/
public class DiaryBeanDao extends AbstractDao<DiaryBean, Long> {

    public static final String TABLENAME = "DIARY_BEAN";

    /**
     * Properties of entity DiaryBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Page = new Property(0, Long.class, "page", true, "_id");
        public final static Property EntryName = new Property(1, String.class, "entryName", false, "ENTRY_NAME");
        public final static Property RecordTime = new Property(2, String.class, "recordTime", false, "RECORD_TIME");
        public final static Property MorningWeather = new Property(3, String.class, "morningWeather", false, "MORNING_WEATHER");
        public final static Property AfternoonWeather = new Property(4, String.class, "afternoonWeather", false, "AFTERNOON_WEATHER");
        public final static Property MorningTemperature = new Property(5, String.class, "morningTemperature", false, "MORNING_TEMPERATURE");
        public final static Property AfternoonTemperature = new Property(6, String.class, "afternoonTemperature", false, "AFTERNOON_TEMPERATURE");
        public final static Property CarpenterNum = new Property(7, String.class, "carpenterNum", false, "CARPENTER_NUM");
        public final static Property BricklayerNum = new Property(8, String.class, "bricklayerNum", false, "BRICKLAYER_NUM");
        public final static Property GangJinNum = new Property(9, String.class, "gangJinNum", false, "GANG_JIN_NUM");
        public final static Property BackmanNum = new Property(10, String.class, "backmanNum", false, "BACKMAN_NUM");
        public final static Property DiaryContent = new Property(11, String.class, "diaryContent", false, "DIARY_CONTENT");
        public final static Property SafetyRecord = new Property(12, String.class, "safetyRecord", false, "SAFETY_RECORD");
        public final static Property Recorder = new Property(13, String.class, "recorder", false, "RECORDER");
        public final static Property BeginTime = new Property(14, String.class, "beginTime", false, "BEGIN_TIME");
        public final static Property EndTime = new Property(15, String.class, "endTime", false, "END_TIME");
    }


    public DiaryBeanDao(DaoConfig config) {
        super(config);
    }
    
    public DiaryBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DIARY_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: page
                "\"ENTRY_NAME\" TEXT," + // 1: entryName
                "\"RECORD_TIME\" TEXT," + // 2: recordTime
                "\"MORNING_WEATHER\" TEXT," + // 3: morningWeather
                "\"AFTERNOON_WEATHER\" TEXT," + // 4: afternoonWeather
                "\"MORNING_TEMPERATURE\" TEXT," + // 5: morningTemperature
                "\"AFTERNOON_TEMPERATURE\" TEXT," + // 6: afternoonTemperature
                "\"CARPENTER_NUM\" TEXT," + // 7: carpenterNum
                "\"BRICKLAYER_NUM\" TEXT," + // 8: bricklayerNum
                "\"GANG_JIN_NUM\" TEXT," + // 9: gangJinNum
                "\"BACKMAN_NUM\" TEXT," + // 10: backmanNum
                "\"DIARY_CONTENT\" TEXT," + // 11: diaryContent
                "\"SAFETY_RECORD\" TEXT," + // 12: safetyRecord
                "\"RECORDER\" TEXT," + // 13: recorder
                "\"BEGIN_TIME\" TEXT," + // 14: beginTime
                "\"END_TIME\" TEXT);"); // 15: endTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DIARY_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DiaryBean entity) {
        stmt.clearBindings();
 
        Long page = entity.getPage();
        if (page != null) {
            stmt.bindLong(1, page);
        }
 
        String entryName = entity.getEntryName();
        if (entryName != null) {
            stmt.bindString(2, entryName);
        }
 
        String recordTime = entity.getRecordTime();
        if (recordTime != null) {
            stmt.bindString(3, recordTime);
        }
 
        String morningWeather = entity.getMorningWeather();
        if (morningWeather != null) {
            stmt.bindString(4, morningWeather);
        }
 
        String afternoonWeather = entity.getAfternoonWeather();
        if (afternoonWeather != null) {
            stmt.bindString(5, afternoonWeather);
        }
 
        String morningTemperature = entity.getMorningTemperature();
        if (morningTemperature != null) {
            stmt.bindString(6, morningTemperature);
        }
 
        String afternoonTemperature = entity.getAfternoonTemperature();
        if (afternoonTemperature != null) {
            stmt.bindString(7, afternoonTemperature);
        }
 
        String carpenterNum = entity.getCarpenterNum();
        if (carpenterNum != null) {
            stmt.bindString(8, carpenterNum);
        }
 
        String bricklayerNum = entity.getBricklayerNum();
        if (bricklayerNum != null) {
            stmt.bindString(9, bricklayerNum);
        }
 
        String gangJinNum = entity.getGangJinNum();
        if (gangJinNum != null) {
            stmt.bindString(10, gangJinNum);
        }
 
        String backmanNum = entity.getBackmanNum();
        if (backmanNum != null) {
            stmt.bindString(11, backmanNum);
        }
 
        String diaryContent = entity.getDiaryContent();
        if (diaryContent != null) {
            stmt.bindString(12, diaryContent);
        }
 
        String safetyRecord = entity.getSafetyRecord();
        if (safetyRecord != null) {
            stmt.bindString(13, safetyRecord);
        }
 
        String recorder = entity.getRecorder();
        if (recorder != null) {
            stmt.bindString(14, recorder);
        }
 
        String beginTime = entity.getBeginTime();
        if (beginTime != null) {
            stmt.bindString(15, beginTime);
        }
 
        String endTime = entity.getEndTime();
        if (endTime != null) {
            stmt.bindString(16, endTime);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DiaryBean entity) {
        stmt.clearBindings();
 
        Long page = entity.getPage();
        if (page != null) {
            stmt.bindLong(1, page);
        }
 
        String entryName = entity.getEntryName();
        if (entryName != null) {
            stmt.bindString(2, entryName);
        }
 
        String recordTime = entity.getRecordTime();
        if (recordTime != null) {
            stmt.bindString(3, recordTime);
        }
 
        String morningWeather = entity.getMorningWeather();
        if (morningWeather != null) {
            stmt.bindString(4, morningWeather);
        }
 
        String afternoonWeather = entity.getAfternoonWeather();
        if (afternoonWeather != null) {
            stmt.bindString(5, afternoonWeather);
        }
 
        String morningTemperature = entity.getMorningTemperature();
        if (morningTemperature != null) {
            stmt.bindString(6, morningTemperature);
        }
 
        String afternoonTemperature = entity.getAfternoonTemperature();
        if (afternoonTemperature != null) {
            stmt.bindString(7, afternoonTemperature);
        }
 
        String carpenterNum = entity.getCarpenterNum();
        if (carpenterNum != null) {
            stmt.bindString(8, carpenterNum);
        }
 
        String bricklayerNum = entity.getBricklayerNum();
        if (bricklayerNum != null) {
            stmt.bindString(9, bricklayerNum);
        }
 
        String gangJinNum = entity.getGangJinNum();
        if (gangJinNum != null) {
            stmt.bindString(10, gangJinNum);
        }
 
        String backmanNum = entity.getBackmanNum();
        if (backmanNum != null) {
            stmt.bindString(11, backmanNum);
        }
 
        String diaryContent = entity.getDiaryContent();
        if (diaryContent != null) {
            stmt.bindString(12, diaryContent);
        }
 
        String safetyRecord = entity.getSafetyRecord();
        if (safetyRecord != null) {
            stmt.bindString(13, safetyRecord);
        }
 
        String recorder = entity.getRecorder();
        if (recorder != null) {
            stmt.bindString(14, recorder);
        }
 
        String beginTime = entity.getBeginTime();
        if (beginTime != null) {
            stmt.bindString(15, beginTime);
        }
 
        String endTime = entity.getEndTime();
        if (endTime != null) {
            stmt.bindString(16, endTime);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public DiaryBean readEntity(Cursor cursor, int offset) {
        DiaryBean entity = new DiaryBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // page
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // entryName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // recordTime
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // morningWeather
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // afternoonWeather
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // morningTemperature
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // afternoonTemperature
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // carpenterNum
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // bricklayerNum
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // gangJinNum
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // backmanNum
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // diaryContent
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // safetyRecord
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // recorder
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // beginTime
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15) // endTime
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DiaryBean entity, int offset) {
        entity.setPage(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setEntryName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setRecordTime(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setMorningWeather(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setAfternoonWeather(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setMorningTemperature(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setAfternoonTemperature(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setCarpenterNum(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setBricklayerNum(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setGangJinNum(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setBackmanNum(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setDiaryContent(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setSafetyRecord(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setRecorder(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setBeginTime(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setEndTime(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(DiaryBean entity, long rowId) {
        entity.setPage(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(DiaryBean entity) {
        if(entity != null) {
            return entity.getPage();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(DiaryBean entity) {
        return entity.getPage() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
